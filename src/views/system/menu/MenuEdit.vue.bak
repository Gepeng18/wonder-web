<template>
  <CommonDialog title="编辑" ref="dialog" @confirm="confirm">
    <el-form :model="formData" label-width="90px" label-suffix="：">
      <el-form-item label="菜单名称">
        <el-input v-model="formData.name"></el-input>
      </el-form-item>
      <el-form-item label="菜单类型">
        <el-select
            v-model="formData.menuType"
            placeholder="请选择类型"
            @change="menuTypeChange"
        >
          <el-option
              v-for="item in options"
              :key="item.value"
              :label="item.label"
              :value="item.value"
          >
          </el-option>
        </el-select>
      </el-form-item>
      <el-form-item label="上级菜单">
        <treeselect
            :options="menuOptions"
            noChildrenText="无选项-选择目录，那么筛选目录菜单。如果选择按钮可以挂在在菜单下"
            placeholder="请选择上级菜单"
            :normalizer="normalizer"
            v-model="menuOptionValue"
            @select="onSelect"
            @deselect="onDeselect"
            open
            treeDefaultExpandAll
        />
      </el-form-item>
      <el-form-item label="权限字符">
        <el-input v-model="formData.permission"></el-input>
      </el-form-item>
      <el-form-item label="菜单排序">
        <el-input-number v-model="formData.sort" controls-position="right" @change="handleChange" :min="1" :max="999"></el-input-number>
      </el-form-item>


    </el-form>
  </CommonDialog>
</template>

<script>
import CommonDialog from "@/components/CommonDialog.vue";
import Treeselect from "@riophae/vue-treeselect";
import "@riophae/vue-treeselect/dist/vue-treeselect.css";

export default {
  name: "MenuEdit",
  components: {CommonDialog, Treeselect},
  data() {
    return {
      formData: {},
      menuOptions: [{
        id: 0,
        name: "主目录",
        children: null,
        menuType: 1,
      }],
      menuOptionValue: null,
      options: [],
      filterForm: {
        columnPathId: [],
        parentColumnId: [],
        columnId: []
      },

    }
  },
  mounted() {
    // this.getMenuTree()

  },

  methods: {
    normalizer(node) {
      if (node.children && !node.children.length) {
        delete node.children
      }
      if (node.id === this.formData.id) {
        return null
      }
      return {
        id: node.id,
        label: node.name,
        children: node.children,
      }
    },

    menuTypeChange(val) {
      this.formData.menuType = val
    },
    handleChange(currentValue) {
      this.formData.sort = currentValue
    },
    onSelect(node) {
      if (node.has_child) {
        this.filterForm.parentColumnId.push(node.id);
      }
      this.filterForm.columnPathId.push(String(node.parentId));
    },

    onDeselect(node) {
      this.filterForm.columnPathId = this.filterForm.columnPathId.filter(
          pathId => node.parentId !== pathId
      );
    },
    getMenuTree() {
      this.$api.menu.treeList().then(res => {
        this.menuOptions[0].children = res
      })
    },

    // getMenuType() {
    //   this.$api.dict.findByType({type: 'system_menu_type'}).then(res => {
    //     this.options = res
    //   })
    // },
    getMenuType() {
      this.options =
          [
            {
              value: 1,
              label: '目录'
            },
            {
              value: 2,
              label: '菜单'
            },
            {
              value: 3,
              label: '按钮'
            },
          ]
    },
    getData(id) {
      this.$api.menu.findById(id).then(res => {
        this.formData = res
        this.menuOptionValue = res.parentId
      })
    },
    show(id) {
      this.getMenuType()

      this.getData(id)

      this.$refs.dialog.show()
    },
    confirm() {

    }
  }
}
</script>

<style scoped>

</style>
